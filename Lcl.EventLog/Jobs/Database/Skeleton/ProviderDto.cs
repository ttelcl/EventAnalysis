/*
 * (c) 2024  ttelcl / ttelcl
 */

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Lcl.EventLog.Utilities;

using Newtonsoft.Json;

namespace Lcl.EventLog.Jobs.Database.Skeleton;

/// <summary>
/// Provider info as it appears in metadata dumps
/// </summary>
public class ProviderDto
{
  /// <summary>
  /// Create a new ProviderDto
  /// </summary>
  public ProviderDto(
    int id,
    string provider,
    string? guid,
    IEnumerable<TaskDto>? tasks = null)
  {
    ProviderId = id;
    ProviderName = provider;
    ProviderGuid = guid;
    Tasks = tasks==null ? new List<TaskDto>() : tasks.ToList();
  }

  /// <summary>
  /// The provider ID (generated by the database)
  /// </summary>
  [JsonProperty("id")]
  public int ProviderId { get; }

  /// <summary>
  /// The provider name
  /// </summary>
  [JsonProperty("provider")]
  public string ProviderName { get; }

  /// <summary>
  /// The provider GUID in text form. Null if unknown.
  /// </summary>
  [JsonProperty("guid")]
  public string? ProviderGuid { get; }

  /// <summary>
  /// The collection of tasks that refer to this provider
  /// </summary>
  [JsonProperty("tasks")]
  public List<TaskDto> Tasks { get; }

  /// <summary>
  /// Used by the JSON serializer to determine if the Tasks collection should be serialized
  /// </summary>
  public bool ShouldSerializeTasks()
  {
    return Tasks.Count > 0;
  }

  /// <summary>
  /// Build the full metadata model from the database
  /// </summary>
  /// <param name="odb">
  /// The opened database
  /// </param>
  /// <param name="shallow">
  /// When true, only the provider info is loaded (no tasks or operations)
  /// </param>
  /// <returns>
  /// The list of provider DTOs (which include the tasks, which in turn include the operations)
  /// </returns>
  public static List<ProviderDto> FromDb(
    OpenDbV2 odb,
    bool shallow)
  {
    var providerScaffolds =
      odb.AllProviderInfoRows()
      .Select(row => new ProviderDto.Scaffold(row))
      .ToDictionary(scaffold => scaffold.Row.ProviderId);
    if(!shallow)
    {
      var taskScaffolds =
        odb.AllTaskInfoRows()
        .Select(row => new TaskDto.Scaffold(row))
        .ToDictionary(scaffold => scaffold.Row.Key);
      var opScaffolds =
        odb.AllOperationInfoRows()
        .Select(opRow => new OperationDto.Scaffold(opRow))
        .ToDictionary(scaffold => scaffold.Row.Key);
      foreach(var opScaffold in opScaffolds.Values)
      {
        var taskScaffold = taskScaffolds[opScaffold.Row.TaskKey];
        taskScaffold.Dto.Operations.Add(opScaffold.Dto);
      }
      foreach(var taskScaffold in taskScaffolds.Values)
      {
        var providerScaffold = providerScaffolds[taskScaffold.Row.ProviderId];
        providerScaffold.Dto.Tasks.Add(taskScaffold.Dto);
      }
    }

    return providerScaffolds.Values.Select(scaffold => scaffold.Dto).ToList();
  }

  internal class Scaffold
  {
    public Scaffold(ProviderInfoRow row)
    {
      Row = row;
      Dto = new ProviderDto(
        row.ProviderId,
        row.ProviderName,
        row.ProviderGuid,
        new List<TaskDto>());
    }

    public ProviderDto Dto { get; }

    public ProviderInfoRow Row { get; }
  }
}
